<%-include("./partials/header.ejs")%>
<style>
  /* Remove the spinner controls for number input */
  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button,
  input[type="number"] {
    -webkit-appearance: none;
    margin: 0;
  }
  /* 
  <select class="form-select" id="category" name="category">
                        <% categoryColl.forEach((e) => {  %>
                            <% if (product.category.categoryName == e.categoryName) { %>
                              <option value="<%= e.categoryName %>"  selected>
                                <%= e.categoryName %>
                            </option>
                            <% } else { %>
                              <option value="<%= e.categoryName %>">
                                <%= e.categoryName %>
                            </option>
                        <% }}) %>
                    </select>   */
</style>
<body>
  <main>
    <section class="pt-150 pb-150">
      <div class="container">
        <div class="row">
          <div class="col-lg-10 m-auto">
            <div class="row">
              <div class="col-lg-6 mx-auto">
                <div
                  class="login_wrap widget-taber-content p-30 background-white border-radius-5"
                >
                  <div class="padding_eight_all bg-white">
                    <div class="heading_s1 d-flex justify-content-center">
                      <h3 class="mb-30">Create an Account</h3>
                    </div>
                    <form method="post" id="userForm" action="/user/">
                      <!-- <span id="errSignupName" class="text-danger"></span> -->
                      <!-- need to find if user already exsists or not -->
                      <div
                        class="text-danger"
                        id="validateName"
                        style="display: none"
                      >
                        please enter valid username
                      </div>
                      <div class="form-group">
                        <input
                          type="text"
                          required=""
                          name="username"
                          placeholder="Username"
                          id="userName"
                        />
                      </div>
                      <div
                        class="text-danger"
                        id="validateEmail"
                        style="display: none"
                      >
                        please enter valid email address
                      </div>
                      <div class="form-group">
                        <input
                          type="text"
                          required=""
                          name="email"
                          placeholder="Email"
                          id="email"
                        />
                      </div>
                      <div
                        class="text-danger"
                        id="validatePhone"
                        style="display: none"
                      >
                        please enter valid phone number
                      </div>
                      <div class="form-group">
                        <input
                          type="number"
                          name="phonenumber"
                          placeholder="Phone Number"
                          id="phoneNumber"
                        />
                      </div>
                      <div
                        class="text-danger"
                        id="validatePassword"
                        style="display: none"
                      >
                        password must contain minimum of atleast 8 characters
                      </div>

                      <div class="form-group">
                        <input
                          required=""
                          type="password"
                          name="password"
                          placeholder="Password"
                          id="password"
                        />
                      </div>

                      <div class="form-group">
                        <input
                          required=""
                          type="password"
                          name="password"
                          placeholder="Confirm password"
                          id="ConfirmPassword"
                        />
                      </div>
                      <div
                        class="text-danger"
                        id="validateCPassword"
                        style="display: none"
                      >
                        password dosent match
                      </div>
                      <div class="form-check">
                        <input
                          class="form-check-input"
                          type="checkbox"
                          value=""
                          id="showPassword"
                          onchange="togglePassword()"
                        />
                        <label class="form-check-label" for="showPassword">
                          Show Password
                        </label>
                      </div>
                      <div class="form-group d-flex justify-content-center">
                        <button
                          type="submit"
                          class="btn btn-fill-out btn-block hover-up"
                          name="login"
                        >
                          Submit &amp; Register
                        </button>
                      </div>
                    </form>
                    <div class="divider-text-center mt-15 mb-15">
                      <span> or</span>
                    </div>
                    <div class="text-muted text-center">
                      Already have an account?
                      <a href="/user/login">Sign in now</a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <script>
    // show the visiblility of password
    function togglePassword() {
      let passwordEle = document.getElementById("password");
      let ConfirmPassword = document.getElementById("ConfirmPassword");
      if (
        passwordEle.type === "password" &&
        ConfirmPassword.type === "password"
      ) {
        passwordEle.type = "text";
        ConfirmPassword.type = "text";
      } else {
        passwordEle.type = "password";
        ConfirmPassword.type = "password";
      }
    }

    document.addEventListener("DOMContentLoaded", function () {
      const form = document.getElementById("userForm");
      form.addEventListener("submit", function (event) {
        const name = document.getElementById("userName").value;
        const email = document.getElementById("email").value;
        const phone = document.getElementById("phoneNumber").value;
        const password = document.getElementById("password").value;
        const cPassword = document.getElementById("ConfirmPassword").value;

        const vName = document.getElementById("validateName");
        if (name.trim() === "") {
          vName.style.display = "block";
          event.preventDefault();
        } else {
          vName.style.display = "none";
        }

        const vEmail = document.getElementById("validateEmail");
        if (email.trim() === "" || emailValidation(email)) {
          vEmail.style.display = "block";
          event.preventDefault();
        } else {
          vEmail.style.display = "none";
        }

        const vPhone = document.getElementById("validatePhone");
        if (phone.trim() === "" || phoneValidation(phone)) {
          vPhone.style.display = "block";
          event.preventDefault();
        } else {
          vPhone.style.display = "none";
        }

        const vPassword = document.getElementById("validatePassword");
        if (password === "" || !passwordValidate(password)) {
          vPassword.style.display = "block";
          event.preventDefault();
        } else {
          vPassword.style.display = "none";
        }

        const vCPassword = document.getElementById("validateCPassword");
        if (password != cPassword) {
          vCPassword.style.display = "block";
          event.preventDefault();
        } else {
          vCPassword.style.display = "none";
        }
      });
    });

    function emailValidation(email) {
      const pattern = /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/;
      return pattern.test(email);
    }
    function phoneValidation(phone) {
      const pattern = /^(\+?91)?[6-9]\d{9}$/;
      return pattern.test(phone);
    }
    function passwordValidate(password) {
      const pattern = /^.{8,}$/;
      return pattern.test(password);
    }
  </script>

  <%-include("./partials/footer.ejs")%>
</body>
<!-- const resendOtp = async (req, res) => {
  try {

      const { email, phone } = req.query
      const ifExist = await userSchema.findOne({
          $or: [
              { email: email },
              { phoneNumber: phone }
          ]
      })
      if (ifExist) {
          res.status(200).json({ error: "User Already Exists" })
      } else {
          let generatedOTP = otpGenerator.generate(6);
          console.log("Generated reSend OTP:", generatedOTP);

          const transport = nodemailer.createTransport({
              service: "gmail",
              host: "smtp.gmail.com",
              port: 587,
              auth: {
                  user: process.env.MY_EMAIL_ID, //sender gmail
                  pass: process.env.APP_PASSWORD    //app password from gmail account
              }
          });

          const mailOption = {
              from: {
                  name: "veeLap",
                  address: process.env.MY_EMAIL_ID
              },
              to: email,
              subject: "veeLap login",
              text: "This is your one time OTP: " + generatedOTP + " don't share with anyone"
          }

          const sendMails = async (transport, mailOption) => {
              try {
                  await transport.sendMail(mailOption)
                  console.log("email send successfully of reSend OTP")
                  // console.log('Server response:', info.response); error says info is not defined
              } catch (error) {
                  console.log(error)
              }
          }
          sendMails(transport, mailOption);
          res.status(200).json({ message: "OTP send to email successfully" })

      }
  } catch (error) {
      console.error(error)
  }
} -->

<!-- 
filter and sort 
// pushing categories to filter to make it into an array
const { sort, categories } = req.body
let filter = [];
let query
let products;
const loggedIn = req.cookies.loggedIn
const userEmail = req.cookies.userEmail
const category = await categoryModel.find({});
if (sort === 'lowToHigh' & typeof categories == "string") {
    console.log("lowtohigh");
    products = await productModel.find({}).sort({ salesPrice: -1 });
    return res.render("user/home", { loggedIn, userEmail, category, products })
} else if (sort === 'highToLow' && typeof(categories) == "String") {
    console.log("high to low");
    products = await productModel.find({}).sort({ salesPrice: 1 });
    return res.render("user/home", { loggedIn, userEmail, category, products })
} else if (sort === 'popularity' && typeof categories == "String") {
    console.log("popularity");
    products = await productModel.find({});
    return res.render("user/home", { loggedIn, userEmail, category, products });
} else {
    console.log("no sort");
    products = null
}
filter.push(categories)
console.log("before filter");
if (filter.length >= 1) {
    console.log("inside filter");
    filter.flatMap(async (c, i) => {
        console.log("inside filter loop",);
        const result = await productModel.find({ category: c })
        if (i == 0) {
            filter = result
        } else {
            filter.push(result)
        }
    })
} else {
    filter = null
}
if (filter && query) {
    await productModel.aggregate([{ $match: { category: { $in: filter } } }])
} else if (filter) {
    products = [...filter]
} else if (query) {
    products = [...query]
} -->
<% if(orderDetails.orderStatus === "Order Placed" || orderDetails.orderStatus
=== "Shipped") {%>
<a
  href="#"
  order-id="<%= orderDetails._id %>"
  id="cancelButton"
  class="btn btn-sm"
  style="background-color: rgb(180, 36, 36)"
  >Cancel Order</a
>
<%} else if(orderDetails.orderStatus === "Delivered") {%> <% if
(orderDetails.expiryDate && new Date(orderDetails.expiryDate) >= new Date()) {
%>
<a
  href="#"
  order-id="<%= orderDetails._id %>"
  id="returnButton"
  class="btn btn-sm"
  style="background-color: rgb(180, 36, 36)"
  >Return</a
>
<% } else { %>
<h5 class="mt-10" style="color: rgb(177, 29, 29)">Return Time Expired</h5>
<% } %> <%} else if(orderDetails.orderStatus === "Cancelled") {%>
<h5 style="color: rgb(177, 29, 29)">The order is Cancelled</h5>
<%} else if (orderDetails.orderStatus === "Returned") {%>
<h5 style="color: rgb(177, 29, 29)">The order is returned</h5>
<%}%>
